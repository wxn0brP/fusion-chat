import config from "../config/database.js";
import { DataBase, Graph, DataBaseRemote, GraphRemote } from "@wxn0brp/db";
const db = {};
const databases = [
    { name: "data", type: "database" },
    { name: "dataGraph", type: "graph" },
    { name: "system", type: "database" },
    { name: "logs", type: "database" },
    { name: "mess", type: "database" },
    { name: "userData", type: "database" },
    { name: "botData", type: "database" },
    { name: "realmConf", type: "database" },
    { name: "realmRoles", type: "database" },
    { name: "realmUser", type: "database" },
    { name: "realmData", type: "database" },
    { name: "realmDataGraph", type: "graph" },
];
function getRemoteConfig(name, path) {
    const cnf = {
        name,
        path,
        url: null,
        auth: null
    };
    const custom = config[name];
    if (custom.url && custom.auth) {
        cnf.url = custom.url;
        cnf.auth = custom.auth;
    }
    else {
        cnf.url = config.remoteDefault.url;
        cnf.auth = config.remoteDefault.auth;
    }
    return cnf;
}
async function initDataBase(name) {
    const cfg = config[name];
    if (cfg.type === "local") {
        return new DataBase(cfg.path);
    }
    else if (cfg.type === "remote") {
        const remoteCfg = getRemoteConfig(name, cfg.path);
        return new DataBaseRemote(remoteCfg);
    }
    else {
        throw new Error("Unknown database type " + cfg.name);
    }
}
async function initGraph(name) {
    const cfg = config[name];
    if (cfg.type === "local") {
        return new Graph(cfg.path);
    }
    else if (cfg.type === "remote") {
        const remoteCfg = getRemoteConfig(name, cfg.path);
        return new GraphRemote(remoteCfg);
    }
    else {
        throw new Error("Unknown database type " + cfg.name);
    }
}
for (const database of databases) {
    if (database.type === "database") {
        db[database.name] = await initDataBase(database.name);
    }
    else if (database.type === "graph") {
        db[database.name] = await initGraph(database.name);
    }
}
export default db;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YUJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9iYWNrL2RhdGFCYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sTUFBTSxNQUFNLHVCQUF1QixDQUFDO0FBQzNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHM0UsTUFBTSxFQUFFLEdBQWlCLEVBQUUsQ0FBQztBQUU1QixNQUFNLFNBQVMsR0FBRztJQUNkLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQ2xDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO0lBQ3BDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQ3BDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBRWxDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQ2xDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQ3RDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBRXJDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQ3ZDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQ3hDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQ3ZDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQ3ZDLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUU7Q0FDNUMsQ0FBQztBQUVGLFNBQVMsZUFB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