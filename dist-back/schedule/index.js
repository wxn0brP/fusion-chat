import schedule from "node-schedule";
import actions from "./actions/index.js";
import db from "../dataBase.js";
export const activeTasks = new Map();
function performTask(actionType, data, taskId) {
    const action = actions[actionType];
    if (!action)
        return console.log(`Unknown action type: ${actionType}`);
    action(data, taskId);
    removeTask(taskId);
}
function scheduleOneTimeTask(task) {
    const { _id, type, sTime, data } = task;
    let scheduledDate = new Date();
    if (typeof sTime == "string")
        scheduledDate = new Date(sTime);
    else if (typeof sTime == "number")
        scheduledDate = new Date(sTime * 1000);
    const currentTime = new Date();
    const timeDiff = scheduledDate.getTime() - currentTime.getTime();
    if (timeDiff <= 10000) {
        performTask(type, data, _id);
    }
    else {
        const job = schedule.scheduleJob(_id, scheduledDate, () => {
            if (!activeTasks.has(_id))
                return;
            performTask(type, data, _id);
        });
        activeTasks.set(_id, job);
    }
}
function processTask(task) {
    if (task.sType === "one-time")
        scheduleOneTimeTask(task);
}
db.system.find("tasks", {}).then(tasks => {
    tasks.forEach(task => processTask(task));
});
export async function cancelTask(taskId) {
    activeTasks.get(taskId)?.cancel();
    removeTask(taskId);
}
export async function removeTask(taskId) {
    await db.system.removeOne("tasks", { _id: taskId });
    if (!activeTasks.has(taskId))
        return;
    activeTasks.delete(taskId);
}
export async function addTask(taskReq) {
    const task = await db.system.add("tasks", taskReq);
    processTask(task);
    return task._id;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9iYWNrL3NjaGVkdWxlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxNQUFNLGVBQWUsQ0FBQztBQUNyQyxPQUFPLE9BQW9CLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBSXJCLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBb0IsQ0FBQztBQUV2RCxTQUFTLFdBQVcsQ0FBQyxVQUFtQixFQUFFLElBQVMsRUFBRSxNQUFVO0lBQzlELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNuQyxJQUFJLENBQUMsTUFBTTtRQUFFLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUN0RSxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3JCLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNwQixDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBQyxJQUFvQjtJQUNoRCxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBRXhDLElBQUksYUFBYSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDL0IsSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRO1FBQUUsYUFBYSxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pELElBQUksT0FBTyxLQUFLLElBQUksUUFBUTtRQUFFLGFBQWEsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFFMUUsTUFBTSxXQUFXLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUMvQixNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsT0FBTyxFQUFFLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRWpFLElBQUksUUFBUSxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3ZCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7U0FBTSxDQUFDO1FBQ1AsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFLEdBQUcsRUFBRTtZQUN6RCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7Z0JBQUUsT0FBTztZQUVsQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztRQUVILFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7QUFDRixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsSUFBb0I7SUFDeEMsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFVBQVU7UUFDNUIsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUVELEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFpQixPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO0lBQ3hELEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMxQyxDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxLQUFLLFVBQVUsVUFBVSxDQUFDLE1BQVU7SUFDMUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQztJQUNsQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsVUFBVSxDQUFDLE1BQVU7SUFDMUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNwRCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFBRSxPQUFPO0lBQ3JDLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsT0FBTyxDQUFDLE9BQW9DO0lBQ2pFLE1BQU0sSUFBSSxHQUFHLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQWlCLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ2pCLENBQUMifQ==