import { authUser, createUser } from "../logic/auth.js";
import db from "../dataBase.js";
import ValidError from "../logic/validError.js";
global.io.of("/qrCodeLogin", (socket) => {
    const auth = socket.handshake.auth;
    if (!auth || !auth.role)
        return;
    if (auth.role == "get")
        roleGet(socket);
    else if (auth.role == "auth")
        roleAuth(socket);
});
function roleGet(socket) {
    const auth = socket.handshake.auth;
    if (!auth.id)
        return;
    if (!auth.device)
        return;
    socket._idK = auth.id;
    socket.device = auth.device;
}
function emitError(socket, error) {
    const err = error.err;
    socket.emit(err[0], ...err.slice(1));
}
async function roleAuth(socket) {
    const auth = socket.handshake.auth;
    if (!auth.to)
        return;
    const namespace = global.io.of("/qrCodeLogin");
    const sockets = Array.from(namespace.sockets.values());
    const filtered = sockets.filter(socket => socket._idK === auth.to);
    if (filtered.length !== 1)
        return emitError(socket, new ValidError("socket").valid("socket"));
    const to_socket = filtered[0];
    socket.emit("device", to_socket.device);
    socket.on("auth", async (data, cb) => {
        const validE = new ValidError("auth");
        if (!data.token)
            return emitError(socket, validE.valid("token"));
        if (!data._id)
            return emitError(socket, validE.valid("_id"));
        if (!data.fr)
            return emitError(socket, validE.valid("fr"));
        const user = await authUser(data.token);
        if (!user)
            return emitError(socket, validE.err("auth"));
        if (user._id !== data._id)
            return emitError(socket, validE.err("auth"));
        if (user.name !== data.fr)
            return emitError(socket, validE.err("auth"));
        const newToken = await createUser(user);
        await db.data.add("token", { token: newToken }, false);
        to_socket.emit("get", newToken, user.name, user._id);
        if (cb && typeof cb === "function")
            cb();
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJDb2RlTG9naW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9iYWNrL3NvY2tldC9xckNvZGVMb2dpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUduRCxPQUFPLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFDckIsT0FBTyxVQUFVLE1BQU0sbUJBQW1CLENBQUM7QUF3QjNDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLE1BQTBCLEVBQUUsRUFBRTtJQUN4RCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQThDLENBQUM7SUFDN0UsSUFBRyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1FBQUUsT0FBTztJQUUvQixJQUFHLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSztRQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNsQyxJQUFHLElBQUksQ0FBQyxJQUFJLElBQUksTUFBTTtRQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsRCxDQUFDLENBQUMsQ0FBQztBQUVILFNBQVMsT0FBTyxDQUFDLE1BQTBCO0lBQ3ZDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBeUIsQ0FBQztJQUV4RCxJQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFBRSxPQUFPO0lBQ3BCLElBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTTtRQUFFLE9BQU87SUFDeEIsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ3RCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUNoQyxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsTUFBMEIsRUFBRSxLQUFVO0lBQ3JELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFH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