import InternalCode from "../../../codes/index.js";
import db from "../../../dataBase.js";
import { combineId } from "../../../logic/chatMgmt.js";
import getChnlPerm from "../../../logic/chnlPermissionCache.js";
import permissionSystem from "../../../logic/permission-system/index.js";
import Permissions from "../../../logic/permission-system/permission.js";
import { extractTimeFromId } from "../../../logic/utils.js";
import valid, { validChannelId } from "../../../logic/validData.js";
import ValidError from "../../../logic/validError.js";
import messageSearchData from "../valid/messageSearch.js";
import { realm_thread_delete } from "./realms.js";
const messageSearchSchemat = valid.objAjv(messageSearchData);
export async function message_edit(suser, chatId, _id, msg, options = {}) {
    options = {
        minMsg: 0,
        maxMsg: 2000,
        ...options,
    };
    const validE = new ValidError("message.edit");
    if (!valid.id(chatId))
        return validE.valid("chatId");
    if (!valid.id(_id))
        return validE.valid("_id");
    if (!valid.str(msg, options.minMsg, options.maxMsg))
        return validE.valid("msg");
    const isDmChat = chatId.startsWith("$");
    const dbChatId = isDmChat ? combineId(suser._id, chatId.replace("$", "")) : chatId;
    const mess = await db.mess.findOne(dbChatId, { _id });
    if (!mess) {
        return validE.err(InternalCode.UserError.Socket.MessageEdit_MessageNotFound);
    }
    if (mess.fr !== suser._id) {
        return validE.err(InternalCode.UserError.Socket.MessageEdit_NotAuthorized);
    }
    const time = Math.floor(new Date().getTime() / 1000).toString(36);
    await db.mess.updateOne(dbChatId, { _id }, { msg, lastEdit: time });
    if (isDmChat) {
        global.sendToSocket(suser._id, "message.edit", _id, msg, time, chatId);
        global.sendToSocket(chatId.replace("$", ""), "message.edit", _id, msg, time, "$" + suser._id);
    }
    else {
        global.sendToChatUsers(dbChatId, "message.edit", _id, msg, time, dbChatId);
    }
    return { err: false };
}
export async function message_delete(suser, chatId, _id) {
    const validE = new ValidError("message.delete");
    if (!valid.id(chatId))
        return validE.valid("chatId");
    if (!valid.id(_id))
        return validE.valid("_id");
    const isDmChat = chatId.startsWith("$");
    const dbChatId = isDmChat ? combineId(suser._id, chatId.replace("$", "")) : chatId;
    const mess = await db.mess.findOne(dbChatId, { _id });
    if (!mess) {
        return validE.err(InternalCode.UserError.Socket.MessageDelete_MessageNotFound);
    }
    if (mess.fr !== suser._id) {
        const permSys = new permissionSystem(dbChatId);
        const userPerm = await permSys.canUserPerformAction(suser._id, Permissions.manageMessages);
        if (!userPerm)
            return validE.err(InternalCode.UserError.Socket.MessageDelete_NotAuthorized);
    }
    await db.mess.removeOne(dbChatId, { _id });
    if (isDmChat) {
        global.sendToSocket(suser._id, "message.delete", _id, chatId);
        global.sendToSocket(chatId.replace("$", ""), "message.delete", _id, "$" + suser._id);
    }
    else {
        global.sendToChatUsers(dbChatId, "message.delete", _id, dbChatId);
        const threads = await db.realmData.find(dbChatId, { reply: _id });
        for (const thread of threads) {
            await realm_thread_delete(suser, dbChatId, thread._id);
        }
    }
    return { err: false };
}
export async function messages_delete(suser, chatId, ids) {
    const validE = new ValidError("messages.delete");
    if (!valid.id(chatId))
        return validE.valid("chatId");
    if (!valid.arrayId(ids))
        return validE.valid("ids");
    const isDmChat = chatId.startsWith("$");
    const dbChatId = isDmChat ? combineId(suser._id, chatId.replace("$", "")) : chatId;
    const messages = await db.mess.find(dbChatId, { $in: { _id: ids } });
    if (messages.some(mess => mess.fr !== suser._id)) {
        if (isDmChat)
            return validE.err(InternalCode.UserError.Socket.MessagesDelete_NotAuthorized);
        const permSys = new permissionSystem(dbChatId);
        const userPerm = await permSys.canUserPerformAction(suser._id, Permissions.manageMessages);
        if (!userPerm)
            return validE.err(InternalCode.UserError.Socket.MessagesDelete_NotAuthorized);
    }
    if (!isDmChat) {
        for (const mess of messages) {
            const threads = await db.realmData.find(dbChatId, { reply: mess._id });
            for (const thread of threads) {
                await realm_thread_delete(suser, chatId, thread._id);
            }
        }
    }
    await db.mess.remove(dbChatId, { $in: { _id: ids } });
    if (isDmChat) {
        global.sendToSocket(suser._id, "messages.delete", ids, chatId);
        global.sendToSocket(chatId.replace("$", ""), "messages.delete", ids, "$" + suser._id);
    }
    else {
        global.sendToChatUsers(dbChatId, "messages.delete", ids, dbChatId);
        const threads = await db.realmData.find(dbChatId, { $in: { reply: ids } });
        for (const thread of threads) {
            await realm_thread_delete(suser, dbChatId, thread._id);
        }
    }
    return { err: false };
}
export async function message_fetch(suser, chatId, chnl, start, end) {
    const validE = new ValidError("message.fetch");
    if (!valid.id(chatId))
        return validE.valid("chatId");
    if (!validChannelId(chnl))
        return validE.valid("chnl");
    if (!valid.num(start, 0))
        return validE.valid("start");
    if (!valid.num(end, 0))
        return validE.valid("end");
    const isDmChat = chatId.startsWith("$");
    const dbChatId = isDmChat ? combineId(suser._id, chatId.replace("$", "")) : chatId;
    if (!isDmChat) {
        const perm = await getChnlPerm(suser._id, dbChatId, chnl);
        if (!perm.view)
            return validE.err(InternalCode.UserError.Socket.MessageFetch_ChannelNotFound);
    }
    const responeAll = await db.mess.find(dbChatId, { chnl }, {}, { reverse: true, max: end + start });
    const res = responeAll.slice(start, end);
    return { err: false, res: [res] };
}
export async function message_fetch_id(suser, chatId, chnl, mess_id) {
    const validE = new ValidError("message.fetch.id");
    if (!valid.id(chatId))
        return validE.valid("chatId");
    if (!valid.id(mess_id))
        return validE.valid("mess_id");
    if (!validChannelId(chnl))
        return validE.valid("chnl");
    const isDmChat = chatId.startsWith("$");
    const dbChatId = isDmChat ? combineId(suser._id, chatId.replace("$", "")) : chatId;
    if (!isDmChat) {
        const perm = await getChnlPerm(suser._id, dbChatId, chnl);
        if (!perm.view)
            return validE.err(InternalCode.UserError.Socket.MessageFetchId_ChannelNotFound);
    }
    const res = await db.mess.findOne(dbChatId, { _id: mess_id });
    return { err: false, res: [res] };
}
export async function message_mark_read(suser, chatId, chnl, mess_id) {
    const validE = new ValidError("message.mark.read");
    if (!valid.id(chatId))
        return validE.valid("to");
    if (!validChannelId(chnl))
        return validE.valid("chnl");
    if (!valid.idOrSpecificStr(mess_id, ["last"]))
        return validE.valid("mess_id");
    const isDmChat = chatId.startsWith("$");
    const search = {};
    if (isDmChat)
        search.priv = chatId.replace("$", "");
    else
        search.realm = chatId;
    let res = undefined;
    if (mess_id == "last") {
        const dbChatId = isDmChat ? combineId(suser._id, chatId.replace("$", "")) : chatId;
        const lastIdMess = await db.mess.find(dbChatId, { chnl }, {}, { reverse: true, max: 1 });
        if (lastIdMess.length == 0)
            return { err: false, res: [0] };
        mess_id = lastIdMess[0]._id;
        res = mess_id;
    }
    await db.userData.updateOne(suser._id, search, {
        $merge: {
            last: {
                [chnl]: mess_id
            }
        }
    });
    return { err: false, res: [res] };
}
export async function message_react(suser, chatId, msgId, react) {
    const validE = new ValidError("message.react");
    if (!valid.id(chatId))
        return validE.valid("chatId");
    if (!valid.id(msgId))
        return validE.valid("msgId");
    if (!valid.str(react, 0, 30))
        return validE.valid("react");
    const isDmChat = chatId.startsWith("$");
    const dbChatId = isDmChat ? combineId(suser._id, chatId.replace("$", "")) : chatId;
    const msg = await db.mess.findOne(dbChatId, { _id: msgId });
    if (!msg)
        return validE.err(InternalCode.UserError.Socket.MessageReact_MessageNotFound);
    const chnl = msg.chnl;
    const perm = await getChnlPerm(suser._id, dbChatId, chnl);
    if (!perm.react)
        return validE.err(InternalCode.UserError.Socket.MessageReact_NotAuthorized);
    const reacts = msg.reacts || {};
    if (!reacts[react])
        reacts[react] = [];
    if (reacts[react].includes(suser._id)) {
        reacts[react] = reacts[react].filter(id => id != suser._id);
        if (reacts[react].length == 0)
            delete reacts[react];
    }
    else {
        reacts[react].push(suser._id);
    }
    await db.mess.updateOne(dbChatId, { _id: msgId }, { reacts });
    if (chatId.startsWith("$")) {
        global.sendToSocket(suser._id, "message.react", suser._id, chatId, msgId, react);
        global.sendToSocket(chatId.replace("$", ""), "message.react", suser._id, "$" + suser._id, msgId, react);
    }
    else {
        global.sendToChatUsers(chatId, "message.react", suser._id, chatId, msgId, react);
    }
    return { err: false };
}
export async function message_search(suser, chatId, chnl, query) {
    const validE = new ValidError("message.search");
    if (!valid.id(chatId))
        return validE.valid("realm");
    if (!validChannelId(chnl))
        return validE.valid("chnl");
    if (!messageSearchSchemat(query))
        return validE.valid("search", messageSearchSchemat.errors);
    const isDmChat = chatId.startsWith("$");
    const dbChatId = isDmChat ? combineId(suser._id, chatId.replace("$", "")) : chatId;
    const res = await db.mess.find(dbChatId, (data, context) => {
        if (data.chnl != chnl)
            return false;
        return context.filterMessages(context.query, data);
    }, { query, filterMessages });
    return { err: false, res: [res] };
}
export async function message_pin(suser, chatId, chnl, msg_id, pin) {
    const validE = new ValidError("message.pin");
    if (!valid.id(chatId))
        return validE.valid("realm");
    if (!validChannelId(chnl))
        return validE.valid("chnl");
    if (!valid.id(msg_id))
        return validE.valid("msgId");
    if (!valid.bool(pin))
        return validE.valid("pin");
    const isDmChat = chatId.startsWith("$");
    const dbChatId = isDmChat ? combineId(suser._id, chatId.replace("$", "")) : chatId;
    await db.mess.updateOne(dbChatId, { _id: msg_id }, { pinned: pin });
    const refreshData = {
        evt: "message.fetch.pinned",
        realm: chatId,
        chnl,
    };
    if (isDmChat) {
        global.sendToSocket(suser._id, "refreshData", refreshData, chatId, chnl);
        refreshData.realm = "$" + suser._id;
        global.sendToSocket(chatId.replace("$", ""), "refreshData", refreshData, "$" + suser._id, chnl);
    }
    else {
        global.sendToChatUsers(chatId, "refreshData", refreshData, chatId, chnl);
    }
    return { err: false };
}
export async function message_fetch_pinned(suser, chatId, chnl) {
    const validE = new ValidError("message.get.pinned");
    if (!valid.id(chatId))
        return validE.valid("realm");
    if (!validChannelId(chnl))
        return validE.valid("chnl");
    const isDmChat = chatId.startsWith("$");
    const dbChatId = isDmChat ? combineId(suser._id, chatId.replace("$", "")) : chatId;
    const res = await db.mess.find(dbChatId, { chnl, pinned: true });
    return { err: false, res: [res] };
}
function filterMessages(query, mess) {
    const time = extractTimeFromId(mess._id);
    if (query.from && mess.fr !== query.from)
        return false;
    if (query.mentions && !mess.msg.includes(`@${query.mentions}`))
        return false;
    if (query.before && time >= new Date(query.before).getTime())
        return false;
    if (query.during) {
        const startOfDay = new Date(query.during).setHours(0, 0, 0, 0);
        const endOfDay = new Date(query.during).setHours(23, 59, 59, 999);
        if (time < startOfDay || time > endOfDay)
            return false;
    }
    if (query.after && time <= new Date(query.after).getTime())
        return false;
    if (query.pinned !== undefined && query.pinned !== (mess.pinned === true))
        return false;
    if (query.message && !mess.msg.includes(query.message))
        return false;
    return true;
}
//# sourceMappingURL=data:application/json;base64,