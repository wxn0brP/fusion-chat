import { db, processDbChanges } from "./imports.js";
export default async (id, data) => {
    const old_data = await db.realmUser.find(id, {});
    let new_data = data.users;
    const new_users = new_data.filter(user => /^[a-zA-Z0-9]/.test(user.u)).map(user => {
        return {
            u: user.u,
            r: user.r
        };
    });
    const old_users = old_data.filter((user) => user.u);
    const changes_users = processDbChanges(old_users, new_users, ["u", "r"], "u");
    const new_bots = new_data.filter(user => user.u.startsWith("^")).map(user => {
        return {
            bot: user.u.replace("^", ""),
            r: user.r
        };
    });
    const old_bots = old_data.filter((user) => user.bot);
    const changes_bots = processDbChanges(old_bots, new_bots, ["bot", "r"], "bot");
    await saveDbChanges(id, changes_users, "u");
    await saveDbChanges(id, changes_bots, "bot");
};
async function saveDbChanges(realmId, changes, trackName) {
    const itemsToUpdate = changes.itemsToUpdate;
    for (const item of itemsToUpdate) {
        await db.realmUser.updateOne(realmId, { [trackName]: item[trackName] }, item);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9iYWNrL3NvY2tldC9jaGF0L2xvZ2ljL3JlYWxtU2V0dGluZ3Mvc2V0L3VzZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxFQUFFLEVBQU0sZ0JBQWdCLEVBQWdELE1BQU0sV0FBVyxDQUFDO0FBRW5HLGVBQWUsS0FBSyxFQUFDLEVBQU0sRUFBRSxJQUEwQixFQUFFLEVBQUU7SUFDdkQsTUFBTSxRQUFRLEdBQUcsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBdUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZGLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFFMUIsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzlFLE9BQU87WUFDSCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDVCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDWixDQUFBO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBdUIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFOUUsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3hFLE9BQU87WUFDSCxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQztZQUM1QixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDWixDQUFBO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBc0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sWUFBWSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFL0UsTUFBTSxhQUFhLENBQUMsRUFBRSxFQUFFLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM1QyxNQUFNLGFBQWEsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2pELENBQUMsQ0FBQTtBQUVELEtBQUssVUFBVSxhQUFhLENBQUMsT0FBVyxFQUFFLE9BQStCLEVBQUUsU0FBaUI7SUFDeEYsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUU1QyxLQUFJLE1BQU0sSUFBSSxJQUFJLGFBQWEsRUFBQyxDQUFDO1FBQzdCLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQ3hCLE9BQU8sRUFDUCxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQ2hDLElBQUksQ0FDUCxDQUFDO0lBQ04sQ0FBQztBQUNMLENBQUMifQ==