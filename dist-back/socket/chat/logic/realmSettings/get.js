import valid from "../../../../logic/validData.js";
import ValidError from "../../../../logic/validError.js";
import permissionSystem from "../../../../logic/permission-system/index.js";
import Permissions, * as PermissionFunctions from "../../../../logic/permission-system/permission.js";
import db from "../../../../dataBase.js";
const DEFAULT_SECTIONS = [
    "meta",
    "categories",
    "channels",
    "roles",
    "users",
    "banUsers",
    "emojis",
    "webhooks"
];
const REQUIRED_PERMISSIONS = {
    meta: [],
    categories: [Permissions.manageChannels],
    channels: [Permissions.manageChannels],
    roles: [Permissions.manageRoles],
    emojis: [Permissions.manageEmojis],
    webhooks: [Permissions.manageWebhooks],
    banUsers: [Permissions.banUser],
    users: []
};
export default async function realm_settings_get(suser, id, sections = []) {
    const validator = new ValidError("realm.settings.get");
    if (!valid.id(id))
        return validator.valid("id");
    if (!valid.arrayString(sections))
        return validator.valid("sections");
    sections = sections.length ? sections : [...DEFAULT_SECTIONS];
    const permSystem = new permissionSystem(id);
    const userPerms = await permSystem.getUserPermissions(suser._id);
    if (!hasRequiredPermissions(userPerms)) {
        return validator.err("You don't have permission to edit this realm");
    }
    const data = {
        addons: {}
    };
    const dbData = await fetchRequiredData(id, sections);
    await Promise.all(sections.map(section => processSection(section, data, dbData, userPerms, id, suser._id)));
    return { err: false, res: data };
}
function hasRequiredPermissions(userPerms) {
    const requiredPerms = [
        Permissions.admin,
        Permissions.manageEmojis,
        Permissions.manageInvites,
        Permissions.manageMessages,
        Permissions.manageRoles,
        Permissions.manageWebhooks
    ];
    return PermissionFunctions.hasAnyPermission(userPerms, requiredPerms);
}
function canAccessData(userPerms, requiredPerms = []) {
    return PermissionFunctions.hasAnyPermission(userPerms, [
        Permissions.admin,
        ...requiredPerms
    ]);
}
async function fetchRequiredData(id, sections) {
    const sectionsRequiringDb = ["meta", "categories", "channels", "banUsers", "emojis", "webhooks"];
    if (!sections.some(section => sectionsRequiringDb.includes(section))) {
        return null;
    }
    return await db.realmConf.find(id, {});
}
async function processSection(section, data, dbData, userPerms, realmId, userId) {
    if (!canAccessData(userPerms, REQUIRED_PERMISSIONS[section])) {
        return;
    }
    switch (section) {
        case "meta":
            const metaData = dbData.find(d => d._id === "set");
            if (metaData) {
                const { _id, ...meta } = metaData;
                data.meta = meta;
            }
            break;
        case "categories":
            data.categories = dbData.filter(d => !!d.cid);
            break;
        case "channels":
            data.channels = dbData.filter(d => !!d.chid);
            data.addons.subscribedChannels = await getSubscribedChannels(realmId);
            break;
        case "roles":
            data.roles = await getAdjustedRoles(realmId, userId);
            break;
        case "emojis":
            data.emojis = dbData.filter(d => !!d.emoji);
            break;
        case "webhooks":
            data.webhooks = dbData.filter(d => !!d.whid);
            break;
        case "banUsers":
            data.banUsers = dbData.filter(d => !!d.ban).map(u => u.ban);
            break;
        case "users":
            const users = await db.realmUser.find(realmId, {});
            data.users = users.map(u => {
                let uid = u.u;
                if (u.bot)
                    uid = "^" + u.bot;
                return { u: uid, r: u.r };
            });
            break;
        default:
            const n = section;
            return n;
    }
}
async function getAdjustedRoles(realm, userId) {
    const permSys = new permissionSystem(realm);
    const allRoles = await permSys.getAllRolesSorted();
    const userHighestRole = await permSys.getUserHighestRole(userId);
    const highestLvl = userHighestRole.lvl;
    const adjustedData = [];
    for (const role of allRoles) {
        const adjRole = { _id: role._id, lvl: role.lvl, name: role.name, p: -1, c: role.c };
        if (role.lvl >= highestLvl) {
            adjRole.p = role.p;
        }
        adjustedData.push(adjRole);
    }
    return adjustedData;
}
async function getSubscribedChannels(realmId) {
    const channels = await db.realmData.find("announcement.channels", { tr: realmId }, {}, {}, { exclude: ["tr"] });
    const realms = groupBySource(channels);
    for (const realm of realms) {
        const names = await db.realmConf.find(realm.sr, {
            $or: realm.scs.map(sc => ({ chid: sc })),
        }, {}, {}, {
            select: ["chid", "name"]
        });
        channels.forEach(channel => {
            channel.name = names.find(n => n.chid == channel.sc).name;
        });
    }
    return channels;
}
function groupBySource(data) {
    const grouped = {};
    data.forEach((chnl) => {
        const { sr, sc } = chnl;
        if (!grouped[sr]) {
            grouped[sr] = { sr, scs: [] };
        }
        grouped[sr].scs.push(sc);
    });
    return Object.values(grouped);
}
//# sourceMappingURL=data:application/json;base64,