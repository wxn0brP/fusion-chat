import InternalCode from "../../../codes/index.js";
import sendMail from "../../../logic/mail.js";
import { createTokenPointer } from "../../../logic/mobileNotif.js";
import ogsToEmbed from "../../../logic/ogToEmbed.js";
import sendMessage from "../../../logic/sendMessage.js";
import * as statusMgmt from "../../../logic/status.js";
import * as tokenFunc from "../../../logic/token/index.js";
import valid, { validChannelId } from "../../../logic/validData.js";
import ValidError from "../../../logic/validError.js";
import { genId } from "@wxn0brp/db";
import ogs from "open-graph-scraper";
import embedData from "../valid/embedData.js";
import statusData from "../valid/status.js";
const embedDataSchemat = valid.objAjv(embedData);
const statusDataSchemat = valid.objAjv(statusData);
export async function get_ogs(suser, link) {
    const validE = new ValidError("get.ogs");
    if (!valid.str(link, 0, 300))
        return validE.valid("link");
    if (!/^https?:\/\//.test(link))
        return validE.valid("link");
    const { error, result } = await ogs({ url: link });
    if (error)
        return validE.err(error);
    return { err: false, res: [result] };
}
export async function send_embed_og(suser, to, chnl, link) {
    const validE = new ValidError("send.embed.og");
    if (!valid.id(to))
        return validE.valid("to");
    if (!validChannelId(chnl))
        return validE.valid("chnl");
    if (!valid.str(link, 0, 300))
        return validE.valid("link");
    if (!/^https?:\/\//.test(link))
        return validE.valid("link");
    const embed = await ogsToEmbed(link);
    if (!embed)
        return validE.err(InternalCode.ServerError.Socket.OgEmbed_ErrorFetching);
    const result = await sendMessage({
        to, chnl, msg: "Embed",
    }, suser, {
        customFields: {
            embed: embed
        }
    });
    if (result.err)
        return validE.err(result.err);
    return { err: false };
}
export async function send_embed_data(suser, to, chnl, embed) {
    const validE = new ValidError("send.embed.data");
    if (!valid.id(to))
        return validE.valid("to");
    if (!validChannelId(chnl))
        return validE.valid("chnl");
    if (!embedDataSchemat(embed))
        return validE.valid("embed", embedDataSchemat.errors);
    const result = await sendMessage({
        to, chnl, msg: "Embed",
    }, suser, {
        customFields: {
            embed
        }
    });
    if (result.err)
        return validE.err(result.err);
    return { err: false };
}
export async function fireToken_get(suser, userToken) {
    const pointer = await createTokenPointer(suser._id, userToken);
    return { err: false, res: [pointer] };
}
export async function status_activity_set(suser, status) {
    const validE = new ValidError("status.activity.set");
    if (!statusDataSchemat(status))
        return validE.valid("status", statusDataSchemat.errors);
    const endCode = statusMgmt.setCache(suser._id, status);
    if (endCode)
        return validE.err(endCode);
    return { err: false };
}
export async function status_activity_get(suser, id) {
    const validE = new ValidError("status.activity.get");
    if (!valid.id(id))
        return validE.valid("id");
    const status = statusMgmt.getCache(id);
    return { err: false, res: [status] };
}
export async function status_activity_gets(suser, ids) {
    const validE = new ValidError("status.activity.gets");
    if (!valid.arrayId(ids))
        return validE.valid("ids");
    const states = ids.map(id => statusMgmt.getCache(id));
    return { err: false, res: [states] };
}
export async function status_activity_remove(suser) {
    statusMgmt.rmCache(suser._id);
    return { err: false };
}
export async function user_delete(suser) {
    const domain = process.env.DOMAIN || "https://fusion.ct8.pl";
    const id = genId();
    const token = await tokenFunc.create({
        _id: id,
        user: suser._id,
    }, "1d", tokenFunc.KeyIndex.GENERAL);
    const confirmLink = `${domain}/rm/account-confirm?token=${token}`;
    const cancelLink = `${domain}/rm/account-undo?token=${token}`;
    sendMail("confirmDeleteAccount", suser.email, suser.name, confirmLink, cancelLink);
    return { err: false };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3RoZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9iYWNrL3NvY2tldC9jaGF0L2xvZ2ljL290aGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sWUFBWSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLFFBQVEsTUFBTSxhQUFhLENBQUM7QUFDbkMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxVQUFVLE1BQU0sa0JBQWtCLENBQUM7QUFDMUMsT0FBTyxXQUFXLE1BQU0sb0JBQW9CLENBQUM7QUFDN0MsT0FBTyxLQUFLLFVBQVUsTUFBTSxlQUFlLENBQUM7QUFDNUMsT0FBTyxLQUFLLFNBQVMsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEtBQUssRUFBRSxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pELE9BQU8sVUFBVSxNQUFNLG1CQUFtQixDQUFDO0FBTTNDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxHQUFHLE1BQU0sb0JBQW9CLENBQUM7QUFDckMsT0FBTyxTQUFTLE1BQU0sb0JBQW9CLENBQUM7QUFDM0MsT0FBTyxVQUFVLE1BQU0saUJBQWlCLENBQUM7QUFFekMsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pELE1BQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUVuRCxNQUFNLENBQUMsS0FBSyxVQUFVLE9BQU8sQ0FBQyxLQUFrQixFQUFFLElBQVk7SUFDMUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUM7UUFBRSxPQUFPLE1BQU0s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