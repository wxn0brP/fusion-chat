import InternalCode from "../../../codes/index.js";
import db from "../../../dataBase.js";
import firebaseSend from "../../../firebase.js";
import { getCache as statusMgmtGetCache } from "../../../logic/status.js";
import valid from "../../../logic/validData.js";
import ValidError from "../../../logic/validError.js";
var friendStatusEnum;
(function (friendStatusEnum) {
    friendStatusEnum[friendStatusEnum["NOT_FRIEND"] = 0] = "NOT_FRIEND";
    friendStatusEnum[friendStatusEnum["IS_FRIEND"] = 1] = "IS_FRIEND";
    friendStatusEnum[friendStatusEnum["REQUEST_SENT"] = 2] = "REQUEST_SENT";
    friendStatusEnum[friendStatusEnum["REQUEST_RECEIVED"] = 3] = "REQUEST_RECEIVED";
})(friendStatusEnum || (friendStatusEnum = {}));
export async function friend_request(suser, nameOrId) {
    const validE = new ValidError("friend.request");
    if (!valid.str(nameOrId, 0, 30) && !valid.id(nameOrId))
        return validE.valid("nameOrId");
    const userExists = await db.data.findOne("user", {
        $or: [
            { name: nameOrId },
            { _id: nameOrId }
        ]
    });
    if (!userExists)
        return validE.err(InternalCode.UserError.Socket.FriendRequest_UserNotFound);
    if (userExists._id == suser._id)
        return validE.err(InternalCode.UserError.Socket.FriendRequest_Self);
    const id = userExists._id;
    const friendExists = await db.dataGraph.findOne("friends", suser._id, id);
    if (friendExists)
        return validE.err(InternalCode.UserError.Socket.FriendRequest_AlreadyFriend);
    const friendRequestExists = await db.data.find("friendRequests", {
        $or: [
            { from: id, to: suser._id },
            { from: suser._id, to: id }
        ]
    });
    if (friendRequestExists.length > 0)
        return validE.err(InternalCode.UserError.Socket.FriendRequest_AlreadySent);
    await db.data.add("friendRequests", { from: suser._id, to: id }, false);
    global.sendToSocket(id, "friend.request", suser._id);
    await firebaseSend({
        to: id,
        title: "Friend request",
        body: suser.name + " wants to be your friend"
    });
    return { err: false };
}
export async function friend_response(suser, id, accept) {
    const validE = new ValidError("friend.response");
    if (!valid.id(id))
        return validE.valid("id");
    if (!valid.bool(accept))
        return validE.valid("accept");
    await db.data.removeOne("friendRequests", { from: id, to: suser._id });
    const friendExists = await db.dataGraph.findOne("friends", suser._id, id);
    if (friendExists)
        return validE.err(InternalCode.UserError.Socket.FriendRequest_AlreadyFriend);
    if (accept)
        await db.dataGraph.add("friends", id, suser._id);
    global.sendToSocket(id, "friend.response", suser._id, accept);
    if (accept)
        global.sendToSocket(suser._id, "refreshData", "friend.get.all");
    firebaseSend({
        to: id,
        title: "Friend request",
        body: suser.name + (accept ? " accepted your friend request" : " rejected your friend request")
    });
    return { err: false };
}
export async function friend_request_remove(suser, id) {
    const validE = new ValidError("friend.request.remove");
    if (!valid.id(id))
        return validE.valid("id");
    await db.data.removeOne("friendRequests", { from: suser._id, to: id });
    global.sendToSocket(id, "refreshData", "friend.requests.get");
    return { err: false };
}
export async function friend_remove(suser, id) {
    const validE = new ValidError("friend.remove");
    if (!valid.id(id))
        return validE.valid("id");
    const friendExists = await db.dataGraph.findOne("friends", suser._id, id);
    if (!friendExists)
        return validE.err(InternalCode.UserError.Socket.FriendRemove_FriendNotFound);
    await db.dataGraph.remove("friends", suser._id, id);
    global.sendToSocket(id, "refreshData", "friend.get.all");
    global.sendToSocket(suser._id, "refreshData", "friend.get.all");
    return { err: false };
}
export async function friend_get_all(suser) {
    const friendsGraph = await db.dataGraph.find("friends", suser._id);
    const friends = friendsGraph.map(f => {
        if (f.a == suser._id)
            return f.b;
        return f.a;
    });
    const friendsStatusPromises = friends.map(async (f) => {
        const userOnline = global.getSocket(f);
        if (userOnline.length == 0)
            return {
                _id: f,
                status: "offline"
            };
        const status = await db.userData.findOne(f, { _id: "status" });
        return {
            _id: f,
            status: status?.status || "online",
            text: status?.text || ""
        };
    });
    const friendsStatus = await Promise.all(friendsStatusPromises);
    return { err: false, res: [friendsStatus] };
}
export async function friend_requests_get(suser) {
    const friendRequestsData = await db.data.find("friendRequests", { to: suser._id });
    const friendRequests = friendRequestsData.map(f => f.from);
    return { err: false, res: [friendRequests] };
}
export async function user_profile(suser, id) {
    const validE = new ValidError("user.profile");
    if (!valid.id(id))
        return validE.valid("id");
    const userN = await db.data.findOne("user", { _id: id });
    if (!userN)
        return validE.err(InternalCode.UserError.Socket.UserProfile_UserNotFound);
    let userStatus = await db.userData.findOne(id, { _id: "status" });
    const userOnline = global.getSocket(id).length > 0;
    if (!userStatus)
        userStatus = {};
    let userStatusType = "";
    let userStatusText = "";
    if (userOnline)
        userStatusType = userStatus?.status || "online";
    if (userOnline && userStatus.text)
        userStatusText = userStatus?.text;
    if (!userOnline && !userStatusType)
        userStatusType = "offline";
    let friendStatus = friendStatusEnum.NOT_FRIEND;
    const isFriend = await db.dataGraph.findOne("friends", suser._id, id);
    if (isFriend) {
        friendStatus = friendStatusEnum.IS_FRIEND;
    }
    else {
        const isFriendRequest = await db.data.findOne("friendRequests", {
            $or: [
                { from: suser._id, to: id },
                { from: id, to: suser._id },
            ]
        });
        if (isFriendRequest) {
            friendStatus = isFriendRequest.from == suser._id
                ? friendStatusEnum.REQUEST_SENT
                : friendStatusEnum.REQUEST_RECEIVED;
        }
    }
    const userIsBlocked = await db.userData.findOne("blocked", { fr: suser._id, to: id });
    const userData = {
        name: userN.name,
        status: userStatusType,
        statusText: userStatusText,
        _id: id,
        friendStatus,
        isBlocked: !!userIsBlocked,
        activity: statusMgmtGetCache(id) || {},
    };
    return { err: false, res: [userData] };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJpZW5kcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2JhY2svc29ja2V0L2NoYXQvbG9naWMvZnJpZW5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFlBQVksTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3JCLE9BQU8sWUFBWSxNQUFNLFdBQVcsQ0FBQztBQUNyQyxPQUFPLEVBQUUsUUFBUSxJQUFJLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sS0FBSyxNQUFNLGtCQUFrQixDQUFDO0FBQ3JDLE9BQU8sVUFBVSxNQUFNLG1CQUFtQixDQUFDO0FBTzNDLElBQUssZ0JBS0o7QUFMRCxXQUFLLGdCQUFnQjtJQUNqQixtRUFBVSxDQUFBO0lBQ1YsaUVBQVMsQ0FBQTtJQUNULHVFQUFZLENBQUE7SUFDWiwrRUFBZ0IsQ0FBQTtBQUNwQixDQUFDLEVBTEksZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUtwQjtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsY0FBYyxDQUFDLEtBQWtCLEVBQUUsUUFBZ0I7SUFDckUsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNoRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUM7UUFBRSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFeEYsTUFBTSxVQUFVLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBZSxNQUFNLEVBQUU7UUFDM0QsR0FBRyxFQUFFO1lBQ0QsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQ2xCLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRTtTQUNwQjtLQUNKLENBQUMs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