import evt from "./evt.js";
import voice from "./voice.js";
import db from "../../dataBase.js";
import register from "./register.js";
import realmSettings from "./realmSettings.js";
import { authUser, createUser } from "../../logic/auth.js";
import SocketEventLimiter, { bannedUsers } from "./limiter.js";
global.io.of("/").use(async (socket, next) => {
    const authData = socket.handshake.auth;
    if (!authData)
        return next(new Error("Authentication error: Missing authentication data."));
    const token = authData.token;
    if (!token)
        return next(new Error("Authentication error: Missing authentication data."));
    const tokenData = { data: null };
    const user = await authUser(token, tokenData);
    if (!user)
        return next(new Error("Authentication error: Missing authentication data."));
    if (bannedUsers.has(user._id)) {
        const userTime = bannedUsers.get(user._id);
        const remainingTime = userTime - Date.now();
        if (remainingTime > 0) {
            const time = Math.ceil(remainingTime / 1000 / 60) + 1;
            return next(new Error(`Ban: You are temporarily banned. Please try again after ${time} minutes.`));
        }
    }
    socket.user = user;
    socket.isShouldRefresh = shouldRefreshToken(tokenData.data);
    next();
});
global.io.of("/").on("connection", (socket) => {
    socket.logError = (e) => {
        lo("Error: ", e);
        db.logs.add("socket.io", {
            error: e.message,
            stackTrace: e.stack,
        });
    };
    const limiter = new SocketEventLimiter(socket);
    socket.onLimit = limiter.onLimit.bind(limiter);
    socket.processSocketError = (res, cb) => {
        const err = res.err;
        if (!Array.isArray(err))
            return false;
        const [event, ...args] = err;
        if (cb)
            cb(...args);
        else
            socket.emit(event, ...args);
        return true;
    };
    register(socket);
    realmSettings(socket);
    voice(socket);
    evt(socket);
    setTimeout(async () => {
        if (socket.isShouldRefresh) {
            const oldToken = socket.handshake.auth.token;
            const newToken = await createUser({ _id: socket.user._id });
            socket.emit("system.refreshToken", newToken, function confirm(confirm) {
                if (!confirm)
                    return;
                db.data.updateOne("token", { token: oldToken }, { token: newToken });
            });
        }
        delete socket.isShouldRefresh;
    }, 2_000);
});
function shouldRefreshToken({ iat, exp }) {
    const now = Math.floor(Date.now() / 1000);
    const lifespan = exp - iat;
    const elapsedTime = now - iat;
    return elapsedTime >= lifespan * 0.75;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9iYWNrL3NvY2tldC9jaGF0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQztBQUN4QixPQUFPLEtBQUssTUFBTSxTQUFTLENBQUM7QUFDNUIsT0FBTyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3JCLE9BQU8sUUFBUSxNQUFNLFlBQVksQ0FBQztBQUVsQyxPQUFPLGFBQWEsTUFBTSxpQkFBaUIsQ0FBQztBQUU1QyxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNuRCxPQUFPLGtCQUFrQixFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRzVELE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsTUFBYyxFQUFFLElBQWMsRUFBRSxFQUFFO0lBQzNELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0lBQ3ZDLElBQUcsQ0FBQyxRQUFRO1FBQUUsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsb0RBQW9ELENBQUMsQ0FBQyxDQUFDO0lBRTNGLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7SUFDN0IsSUFBRyxDQUFDLEtBQUs7UUFBRSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxvREFBb0QsQ0FBQyxDQUFDLENBQUM7SUFFeEYsTUFBTSxTQUFTLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDakMsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBZ0IsQ0FBQztJQUM3RCxJQUFHLENBQUMsSUFBSTtRQUFFLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLG9EQUFvRCxD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