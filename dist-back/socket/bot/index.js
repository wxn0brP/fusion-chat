import db from "../../dataBase.js";
import register from "./register.js";
import SocketEventLimiter, { bannedUsers } from "../chat/limiter.js";
import { decode, KeyIndex } from "../../logic/token/index.js";
import voice from "../chat/voice.js";
global.io.of("/bot").use(async (socket, next) => {
    const authData = socket.handshake.auth;
    if (!authData)
        return next(new Error("Authentication error: Missing authentication data."));
    const token = authData.token;
    if (!token)
        return next(new Error("Authentication error: Missing authentication data."));
    const tokenData = await decode(token, KeyIndex.BOT_TOKEN);
    const _id = tokenData._id;
    const isValid = await db.botData.findOne(_id, { token });
    if (!isValid)
        return next(new Error("Authentication error: Missing authentication data."));
    const user = {
        _id,
        name: await db.botData.findOne(_id, { _id: "name" }).then(d => d.name),
        email: undefined,
    };
    if (bannedUsers.has(user._id)) {
        const userTime = bannedUsers.get(user._id);
        const remainingTime = userTime - Date.now();
        if (remainingTime > 0) {
            const time = Math.ceil(remainingTime / 1000 / 60) + 1;
            return next(new Error(`Ban: You are temporarily banned. Please try again after ${time} minutes.`));
        }
    }
    socket.user = user;
    next();
});
global.io.of("/bot").on("connection", (socket) => {
    socket.logError = (e) => {
        lo("Error: ", e);
        db.logs.add("socket.io", {
            error: e.message,
            stackTrace: e.stack,
        });
    };
    socket.processSocketError = (res, cb) => {
        const err = res.err;
        if (!Array.isArray(err))
            return false;
        const [event, ...args] = err;
        if (cb)
            cb(...args);
        else
            socket.emit(event, ...args);
        return true;
    };
    const limiter = new SocketEventLimiter(socket);
    socket.onLimit = limiter.onLimit.bind(limiter);
    register(socket);
    voice(socket);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9iYWNrL3NvY2tldC9ib3QvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3JCLE9BQU8sUUFBUSxNQUFNLFlBQVksQ0FBQztBQUlsQyxPQUFPLGtCQUFrQixFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUd0RCxPQUFPLEtBQUssTUFBTSxlQUFlLENBQUM7QUFFbEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFjLEVBQUUsSUFBYyxFQUFFLEVBQUU7SUFDOUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7SUFDdkMsSUFBSSxDQUFDLFFBQVE7UUFBRSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxvREFBb0QsQ0FBQyxDQUFDLENBQUM7SUFFNUYsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztJQUM3QixJQUFJLENBQUMsS0FBSztRQUFFLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLG9EQUFvRCxDQUFDLENBQUMsQ0FBQztJQUV6RixNQUFNLFNBQVMsR0FBRyxNQUFNLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFELE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFTLENBQUM7SUFFaEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELElBQUksQ0FBQyxPQUFPO1FBQUUsT0FBTyxJQUFJ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