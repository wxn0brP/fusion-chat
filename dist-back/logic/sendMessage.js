import { chatExists as _chatExists, combineId } from "./chatMgmt.js";
import valid, { validChannelId } from "./validData.js";
import ValidError from "./validError.js";
import getChnlPerm from "./chnlPermissionCache.js";
import db from "../dataBase.js";
import checkDmChat from "./sendMessageUtils/dm.js";
import announcementChnl from "./sendMessageUtils/announcementChnl.js";
import InternalCode from "../codes/index.js";
import firebaseSend from "../firebase.js";
const validE = new ValidError("mess");
export default async function sendMessage(req, user, options = {}) {
    options = prepareOptions(options);
    const errs = validData(req, user, options);
    if (errs)
        return errs;
    const processed = await processIdAndPerm(req, user, options);
    if (processed.err)
        return processed;
    const privChat = processed.res.privChat;
    const originalTo = req.to;
    const processedTo = processed.res.to;
    let data = {
        fr: options.frPrefix + user._id,
        msg: req.msg.trim(),
        chnl: req.chnl,
        ...(options.customFields || {}),
    };
    if (req.enc)
        data.enc = req.enc;
    if (req.res)
        data.res = req.res;
    const message = await db.mess.add(processedTo, data);
    data._id = message._id;
    if (req.silent)
        data.silent = req.silent || false;
    global.sendToSocket(user._id, "mess", Object.assign({ to: originalTo }, data));
    if (privChat)
        sendDmNotification(originalTo, user, data);
    else
        await sendReamNotification(originalTo, user, data);
    return { err: false };
}
function prepareOptions(options) {
    options = {
        system: false,
        minMsg: 0,
        maxMsg: 2000,
        frPrefix: "",
        ...options
    };
    return options;
}
function validData(req, user, options = {}) {
    if (!user)
        return validE.err(InternalCode.UserError.Socket.NotAuthorized);
    if (typeof req !== "object")
        return validE.valid("req");
    if (!valid.id(req.to))
        return validE.valid("to");
    if (!validChannelId(req.chnl))
        return validE.valid("chnl");
    if (!valid.str(req.msg, options.minMsg, options.maxMsg))
        return validE.valid("msg");
    if (req.enc && !valid.str(req.enc, 0, 30))
        return validE.valid("enc");
    if (req.res && !valid.id(req.res))
        return validE.valid("res");
    if (req.silent && !valid.bool(req.silent))
        return validE.valid("silent");
}
async function processIdAndPerm(req, user, options) {
    let { to, chnl } = req;
    const privChat = to.startsWith("$");
    if (privChat) {
        let p1 = user._id;
        let p2 = to.replace("$", "");
        to = combineId(p1, p2);
        const checkData = await checkDmChat(p1, p2, to, validE);
        if (checkData)
            return checkData;
        await db.mess.checkCollection(to);
    }
    else {
        const chatExists = await _chatExists(to);
        if (!chatExists)
            return validE.err(InternalCode.UserError.Socket.ChatIsNotFound);
    }
    if (!privChat && !options.system) {
        const perm = await getChnlPerm(user._id, to, chnl);
        if (!perm.view)
            return validE.err(InternalCode.UserError.Socket.ChannelIsNotFound);
        if (!perm.write)
            return validE.err(InternalCode.UserError.Socket.NoPermissionToWriteMessage);
        if (chnl.startsWith("&") && !perm.threadWrite)
            return validE.err(InternalCode.UserError.Socket.NoPermissionToWriteMessage);
    }
    return { err: false, res: { to, privChat } };
}
async function sendReamNotification(to, user, data) {
    const realm = await db.realmConf.findOne(to, { _id: "set" });
    const fromMsg = `${realm.name} @${user.name}`;
    data.to = to;
    db.realmUser.find(to, { $exists: { u: true } })
        .then(chat => {
        chat.forEach(async (chat_user) => {
            const uid = chat_user.u;
            if (uid == user._id)
                return;
            const realm = await db.userData.findOne(uid, { realm: to });
            if (realm && realm.muted && realm.muted != -1) {
                const muted = realm.muted;
                if (muted == 0)
                    return;
                if (muted > new Date().getTime())
                    return;
            }
            global.sendToSocket(uid, "mess", data);
            if (data.silent)
                return;
            firebaseSend({
                to: uid,
                title: "New message from " + fromMsg,
                body: data.msg,
                action: { type: "ctrl", data: [["cc", data.to + "_" + data.chnl]] }
            });
        });
    });
    db.realmUser.find(to, { $exists: { bot: true } })
        .then(botUsers => {
        botUsers.forEach(user => {
            global.getSocket(user.bot, "bot").forEach(connection => {
                connection.emit("mess", data);
            });
        });
    });
    await announcementChnl(to, data);
}
function sendDmNotification(to, user, data) {
    const toSend = to.replace("$", "");
    data.to = "$" + user._id;
    global.sendToSocket(toSend, "mess", data);
    if (data.silent)
        return;
    firebaseSend({
        to: toSend,
        title: "New message from " + user.name,
        body: data.msg,
        action: { type: "ctrl", data: [["chat", "$" + user._id]] }
    });
}
//# sourceMappingURL=data:application/json;base64,