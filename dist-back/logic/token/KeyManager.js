import { generateKeyPair, exportSPKI, exportPKCS8, importSPKI, importPKCS8 } from "jose";
import db from "../../dataBase.js";
var KeyIndex;
(function (KeyIndex) {
    KeyIndex[KeyIndex["GENERAL"] = 0] = "GENERAL";
    KeyIndex[KeyIndex["TEMPORARY"] = 1] = "TEMPORARY";
    KeyIndex[KeyIndex["USER_TOKEN"] = 2] = "USER_TOKEN";
    KeyIndex[KeyIndex["BOT_TOKEN"] = 3] = "BOT_TOKEN";
    KeyIndex[KeyIndex["WEBHOOK_TOKEN"] = 4] = "WEBHOOK_TOKEN";
})(KeyIndex || (KeyIndex = {}));
;
class KeyManager {
    db;
    constructor() {
        this.db = db.system;
    }
    async getKeyPair(index = KeyIndex.GENERAL) {
        const keyPair = await this.db.findOne("encryptionKeys", { index });
        if (!keyPair)
            return null;
        return {
            publicKey: await importSPKI(keyPair.pub, "RSA-OAEP-256"),
            privateKey: await importPKCS8(keyPair.prv, "RSA-OAEP-256")
        };
    }
    async addKeyPair(index) {
        const { publicKey, privateKey } = await generateKeyPair("RSA-OAEP-256");
        const publicKeyPEM = await exportSPKI(publicKey);
        const privateKeyPEM = await exportPKCS8(privateKey);
        await this.db.add("encryptionKeys", {
            index,
            pub: publicKeyPEM,
            prv: privateKeyPEM
        }, false);
    }
    async initKeyPairs() {
        for (const index of Object.values(KeyIndex)) {
            if (typeof index !== "number")
                continue;
            const exists = await this.db.findOne("encryptionKeys", { index });
            if (exists)
                continue;
            await this.addKeyPair(index);
        }
    }
}
const keyManager = new KeyManager();
await keyManager.initKeyPairs();
export default keyManager;
export { KeyIndex, KeyManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2V5TWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2JhY2svbG9naWMvdG9rZW4vS2V5TWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN6RixPQUFPLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFHckIsSUFBSyxRQU1KO0FBTkQsV0FBSyxRQUFRO0lBQ1QsNkNBQU8sQ0FBQTtJQUNQLGlEQUFTLENBQUE7SUFDVCxtREFBVSxDQUFBO0lBQ1YsaURBQVMsQ0FBQTtJQUNULHlEQUFhLENBQUE7QUFDakIsQ0FBQyxFQU5JLFFBQVEsS0FBUixRQUFRLFFBTVo7QUFBQSxDQUFDO0FBRUYsTUFBTSxVQUFVO0lBQ1osRUFBRSxDQUFXO0lBRWI7UUFDSSxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLElBQUcsQ0FBQyxPQUFPO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFekIsT0FBTztZQUNILFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQztZQUN4RCxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUM7U0FDN0QsQ0FBQztJQUNOLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQWU7UUFDNUIsTUFBTSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsR0FBRyxNQUFNLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN4RSxNQUFNLFlBQVksR0FBRyxNQUFNLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqRCxNQUFNLGFBQWEsR0FBRyxNQUFNLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVwRCxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFO1lBQ2hDLEtBQUs7WUFDTCxHQUFHLEVBQUUsWUFBWTtZQUNqQixHQUFHLEVBQUUsYUFBYTtTQUNyQixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyxZQUFZO1FBQ2QsS0FBSSxNQUFNLEtBQUssSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFDLENBQUM7WUFDeEMsSUFBRyxPQUFPLEtBQUssS0FBSyxRQUFRO2dCQUFFLFNBQVM7WUFDdkMsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDbEUsSUFBRyxNQUFNO2dCQUFFLFNBQVM7WUFDcEIsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLENBQUM7SUFDTCxDQUFDO0NBQ0o7QUFFRCxNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBQ3BDLE1BQU0sVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ2hDLGVBQWUsVUFBVSxDQUFDO0FBQzFCLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLENBQUMifQ==